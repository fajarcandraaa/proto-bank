// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/document.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	StoreDocument(ctx context.Context, opts ...grpc.CallOption) (Document_StoreDocumentClient, error)
	GetDocumentByReffNumber(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	UpdateDocumentByReffNumber(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	DeleteDocumentByReffNumber(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	ListDocument(ctx context.Context, in *DocumentParameterRequest, opts ...grpc.CallOption) (*ListServiceDocumentResponse, error)
	RevokeDocument(ctx context.Context, in *RevokeDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) StoreDocument(ctx context.Context, opts ...grpc.CallOption) (Document_StoreDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Document_ServiceDesc.Streams[0], "/Document/StoreDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentStoreDocumentClient{stream}
	return x, nil
}

type Document_StoreDocumentClient interface {
	Send(*UploadDocRequest) error
	CloseAndRecv() (*UploadDocResponse, error)
	grpc.ClientStream
}

type documentStoreDocumentClient struct {
	grpc.ClientStream
}

func (x *documentStoreDocumentClient) Send(m *UploadDocRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentStoreDocumentClient) CloseAndRecv() (*UploadDocResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadDocResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentClient) GetDocumentByReffNumber(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/Document/GetDocumentByReffNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) UpdateDocumentByReffNumber(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/Document/UpdateDocumentByReffNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) DeleteDocumentByReffNumber(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, "/Document/DeleteDocumentByReffNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) ListDocument(ctx context.Context, in *DocumentParameterRequest, opts ...grpc.CallOption) (*ListServiceDocumentResponse, error) {
	out := new(ListServiceDocumentResponse)
	err := c.cc.Invoke(ctx, "/Document/ListDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) RevokeDocument(ctx context.Context, in *RevokeDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/Document/RevokeDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServer is the server API for Document service.
// All implementations must embed UnimplementedDocumentServer
// for forward compatibility
type DocumentServer interface {
	StoreDocument(Document_StoreDocumentServer) error
	GetDocumentByReffNumber(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	UpdateDocumentByReffNumber(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	DeleteDocumentByReffNumber(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	ListDocument(context.Context, *DocumentParameterRequest) (*ListServiceDocumentResponse, error)
	RevokeDocument(context.Context, *RevokeDocumentRequest) (*GetDocumentResponse, error)
	mustEmbedUnimplementedDocumentServer()
}

// UnimplementedDocumentServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServer struct {
}

func (UnimplementedDocumentServer) StoreDocument(Document_StoreDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreDocument not implemented")
}
func (UnimplementedDocumentServer) GetDocumentByReffNumber(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentByReffNumber not implemented")
}
func (UnimplementedDocumentServer) UpdateDocumentByReffNumber(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentByReffNumber not implemented")
}
func (UnimplementedDocumentServer) DeleteDocumentByReffNumber(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocumentByReffNumber not implemented")
}
func (UnimplementedDocumentServer) ListDocument(context.Context, *DocumentParameterRequest) (*ListServiceDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocument not implemented")
}
func (UnimplementedDocumentServer) RevokeDocument(context.Context, *RevokeDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDocument not implemented")
}
func (UnimplementedDocumentServer) mustEmbedUnimplementedDocumentServer() {}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_StoreDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServer).StoreDocument(&documentStoreDocumentServer{stream})
}

type Document_StoreDocumentServer interface {
	SendAndClose(*UploadDocResponse) error
	Recv() (*UploadDocRequest, error)
	grpc.ServerStream
}

type documentStoreDocumentServer struct {
	grpc.ServerStream
}

func (x *documentStoreDocumentServer) SendAndClose(m *UploadDocResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentStoreDocumentServer) Recv() (*UploadDocRequest, error) {
	m := new(UploadDocRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Document_GetDocumentByReffNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetDocumentByReffNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Document/GetDocumentByReffNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetDocumentByReffNumber(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_UpdateDocumentByReffNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).UpdateDocumentByReffNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Document/UpdateDocumentByReffNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).UpdateDocumentByReffNumber(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_DeleteDocumentByReffNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).DeleteDocumentByReffNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Document/DeleteDocumentByReffNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).DeleteDocumentByReffNumber(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_ListDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).ListDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Document/ListDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).ListDocument(ctx, req.(*DocumentParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_RevokeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).RevokeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Document/RevokeDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).RevokeDocument(ctx, req.(*RevokeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Document",
	HandlerType: (*DocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocumentByReffNumber",
			Handler:    _Document_GetDocumentByReffNumber_Handler,
		},
		{
			MethodName: "UpdateDocumentByReffNumber",
			Handler:    _Document_UpdateDocumentByReffNumber_Handler,
		},
		{
			MethodName: "DeleteDocumentByReffNumber",
			Handler:    _Document_DeleteDocumentByReffNumber_Handler,
		},
		{
			MethodName: "ListDocument",
			Handler:    _Document_ListDocument_Handler,
		},
		{
			MethodName: "RevokeDocument",
			Handler:    _Document_RevokeDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreDocument",
			Handler:       _Document_StoreDocument_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/document.proto",
}
